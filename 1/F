#include <iostream>
#include <fstream>
#include <string>
using namespace std;

int merge(int arr[], int temp[], int left, int mid, int right){
    int i, j, k;
    int inv_count = 0;
    i = left;
    j = mid;
    k = left;
    while ((i <= mid - 1) && (j <= right)) {
        if (arr[i] <= arr[j]) {
            temp[k++] = arr[i++];
        }
        else {
            temp[k++] = arr[j++];
            inv_count = inv_count + (mid - i);
        }
    }
    while (i <= mid - 1) {
        temp[k++] = arr[i++];
    }
    while (j <= right) {
        temp[k++] = arr[j++];
    }
    for (i = left; i <= right; i++) {
        arr[i] = temp[i];
    }
    return inv_count;
}

int ExtraMergeSort(int arr[], int temp[], int left, int right){
    int mid, inv_count = 0;
    if (right > left) {
        mid = (right + left) / 2;
        inv_count = ExtraMergeSort(arr, temp, left, mid);
        inv_count += ExtraMergeSort(arr, temp, mid + 1, right);
        inv_count += merge(arr, temp, left, mid + 1, right);
    }
    return inv_count;
}

int mergeSort(int arr[], int array_size){
    int* temp = new int[array_size];
    return ExtraMergeSort(arr, temp, 0, array_size - 1);
}

int main(int argv, char** args){
    ifstream input;
    input.open("inverse.in");
    ofstream output;
    output.open("inverse.out");
    int n;
    input>> n;
    int *array = new int[n];
    for (int i = 0; i < n; i++) {
        if (input) {
            input >> array[i];
            input.ignore(1);
        }
    }
    output<<mergeSort(array, n);
    delete[] array;
    input.close();
    output.close();
    return 0;
}
